// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// change in Schema used command
// npx prisma generate
// npx prisma db push
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// PRofile in mySql with prisma

model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text


  servers Server[]

 
  members Member[]
  

  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// server Model mySql with prisma


model Server{
  id String @id @default(uuid() )
  name String
  imageUrl String @db.Text
  inviteCode String @db.Text
  profileId String 

  // relations in prisma with profile
   profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  //  to warning we used this down below
  @@index([profileId])

  members Member[]
  channels Channel[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// every server have member and every member have Role
// create enum memberRole
// SPECIFICATION ONLY FOR MEMBER ROLES
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid() )
  // where we use enum of MemberRole
  role MemberRole @default(GUEST)

  // relations in prisma with profile
  profileId String 
   profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  //  to warning we used this down below
  @@index([profileId])

  // relations in prisma with server
  serverId String 
   server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  //  to warning we used this down below
  @@index([serverId])


 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum ChannelType {
  AUDIO
  VIDEO
  TEXT
}

model Channel{
  id String @id @default(uuid() )
  name String
  type ChannelType @default(TEXT)

   // relations in prisma with profile
  profileId String 
   profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  //  to warning we used this down below
  @@index([profileId])

   // relations in prisma with server
  serverId String 
   server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  //  to warning we used this down below
  @@index([serverId])


 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 